#version 450
#extension GL_GOOGLE_include_directive : require
#include "defines.glsl"
#include "light.glsl"
#include "primitive.glsl"

layout(binding=0, outputFormat) uniform image2D rayOutput;

layout(binding=0, std140) uniform GPUData {

	vec3 eye;
	uint width;

	vec3 p0;
	uint height;

	vec3 p1;
	float pad2;

	vec3 p2;
	float pad3;

	vec3 skyboxColor;
	float exposure;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding=7, std140) readonly buffer Lights {
	Light lights[];
};

struct Position { vec3 pos; uint shadowStart; };

layout(binding=8, std140) readonly buffer PositionBuffer {
	Position positions[];
};

layout(binding=5, std140) readonly buffer Counters {
	uint shadowCounter;
	uint reflrectionCounter;
};

layout(binding=4, std140) readonly buffer ShadowRays {
	RayPayload shadowRays[];
};

//Handling intersection

void main() {

	//Get ray position

	const ivec2 loc = ivec2(gl_GlobalInvocationID.xy);

	if(loc.x >= width || loc.y >= height) return;

	//Store

	vec3 color = imageLoad(rayOutput, loc).rgb;

	const uint loc1D = loc.x + loc.y * width;
	const uint shadowStart = positions[loc1D].shadowStart;

	if(shadowStart != noRayHit)
		for(uint i = 0; i < lights.length(); ++i) {
			const RayPayload shadowRay = shadowRays[shadowStart + i];
			color += shadowRay.color * float(shadowRay.loc1D == 0);
		}

	//Exposure mapping

	color = vec3(1, 1, 1) - exp(-color * exposure);

	//Gamma correction

	color = 
			color * 0.012522878 +
            color * color * 0.682171111 +
            color * color * color * 0.305306011;

	imageStore(rayOutput, loc, vec4(color, 1));
}