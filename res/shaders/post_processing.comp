#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_ballot : require
#include "defines.glsl"
#include "light_rt.glsl"

layout(binding=0, rgba8) uniform image2D rayOutput;
layout(binding=1, rgba32f) uniform image2D accumulationBuffer;
layout(binding=2, outputFormat) readonly uniform image2D reflectionOutput;
layout(binding=0) uniform sampler2DMS ui;

layout(binding=13, std140) readonly buffer HitBuffer {
	Hit hitBuffer[];
};

//Handling shading, etc.

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

void main() {

	//Get ray position

	const ivec2 loc = ivec2(gl_GlobalInvocationID.xy);

	if(loc.x >= width || loc.y >= height) return;

	const uvec2 uloc = ivec2(gl_GlobalInvocationID.xy);
	
	//Calculate hit

	const uint loc1D = loc.x + loc.y * width;
	const Ray prim = calculatePrimary(loc);

	const Hit hit = hitBuffer[loc1D];
	const vec3 hitPos = hit.hitT * prim.dir + prim.pos;

	const vec3 sky = sampleSkybox(prim.dir);

	vec3 color;

	#ifdef GRAPHICS_DEBUG

	switch(displayType) {

		case DisplayType_Default: {
			const vec3 reflectionColor = imageLoad(reflectionOutput, loc).rgb;
			color = shadeHitRT(prim, hit, reflectionColor, uloc);
			break;
		}

		case DisplayType_Accumulation: {

	#endif

			const vec3 reflectionColor = imageLoad(reflectionOutput, loc).rgb;
			color = shadeHitRT(prim, hit, reflectionColor, uloc);
		
			if(sampleCount > 1)
				color += imageLoad(accumulationBuffer, loc).rgb;

			imageStore(accumulationBuffer, loc, vec4(color, 0));

			color /= sampleCount;

	#ifdef GRAPHICS_DEBUG

			break;
		}

		case DisplayType_Intersection_attributes:
			color = vec3(mod(hit.intersection, 2), 0);
			break;

		case DisplayType_Normals:
			color = hit.normal.xyz * 0.5 + 0.5;
			break;

		case DisplayType_Albedo:
			color = hit.hitT != noHit ?  materials[hit.material].albedo : sky;
			break;

		case DisplayType_Light_buffer: {
		
			const Material m = materials[hit.material];
			const vec3 F0 = mix(vec3(0.04), m.albedo, m.metallic);

			const vec3 v = normalize(hitPos - eye);
			const float NdotV = max(dot(-hit.normal, v), 0);

			const vec3 kS = fresnelSchlickRoughness(F0, NdotV, m.metallic, m.albedo, m.roughness);
			const vec3 kD = (1 - kS) * (1 - m.metallic);

			color = vec3(0);

			for(uint i = 0; i < lights.length(); ++i)
				if(didHit(loc, i))
					color += shadeLight(F0, m, lights[i], hitPos, hit.normal, v, NdotV);

			break;
		}

		case DisplayType_Reflection_buffer:
		case DisplayType_Reflection_albedo:
		case DisplayType_Reflection_normals:
		case DisplayType_Reflection_material:
		case DisplayType_Reflection_object:
		case DisplayType_Reflection_intersection_side:
		case DisplayType_Reflection_intersection_attributes:
		case DisplayType_Reflection_of_reflection:
			color = imageLoad(reflectionOutput, loc).rgb;
			break;

		case DisplayType_No_secondaries:
			color = shadeHitFinalRecursion(prim, hit);
			break;

		case DisplayType_UI_Only:
			color = vec3(0);
			break;

		case DisplayType_Material:
			color = vec3(float(hit.hitT != noHit ? hit.material + 1 : 0) / (materials.length() + 1));
			break;

		case DisplayType_Object:
			color = vec3(float(hit.hitT != noHit ? hit.object + 1 : 0) / (1 + triangleCount + sphereCount + cubeCount + planeCount));
			break;

		case DisplayType_Intersection_side:
			color = vec3((floor(hit.intersection.xy) - 2) / 6, 0);
			break;

		case DisplayType_Shadows_no_reflection: 
			color = shadeHitFinalRecursionRT(prim, hit, uloc);
			break;

		case DisplayType_Dispatch_groups: {
		
			const uvec2 res = uvec2(width, height);
			const uvec2 shift = uvec2(4, gl_SubGroupSizeARB == 32 ? 1 : 2);
			const uvec2 mask = uvec2(15, gl_SubGroupSizeARB == 32 ? 1 : 3);
		
			uvec2 tiles = res >> shift;

			tiles += uvec2(notEqual(res & mask, uvec2(0)));	
			
			const uvec2 tile = loc >> shift;
			const uint tilePos = tile.y * tiles.x + tile.x;

			color = vec3((tilePos & 255) / 255.0, ((tilePos >> 8) & 255) / 255.0, ((tilePos >> 16) & 255) / 255.0);
			break;
		}
	}

	#endif

	//Exposure mapping

	if(any(isnan(color)))				//TODO: Why is diffuse NaN? invalid shadeHit
		color = vec3(0, 0, 10000);

	color = vec3(1, 1, 1) - exp(-color * exposure);

	//Blend with UI

	int sampleCount = textureSamples(ui);

	ivec2 sampleLoc = ivec2(loc.x, height - loc.y);

	if(disableUI == 0) {

		vec4 uiColor = toRGB(texelFetch(ui, sampleLoc, 0));

		for(int i = 1; i < sampleCount; ++i)
			uiColor += toRGB(texelFetch(ui, sampleLoc, i));

		uiColor /= sampleCount;

		color = mix(color, uiColor.rgb, float(uiColor.a != 0));

	}

	//Store
	
	imageStore(rayOutput, loc, vec4(color, 1));
}