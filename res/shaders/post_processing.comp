#version 450
#extension GL_GOOGLE_include_directive : require
#include "defines.glsl"
#include "utils.glsl"

layout(binding=0, outputFormat) uniform image2DArray rayOutput;

layout(binding=0, std140) uniform GPUData {

	vec3 eye;
	float pad0;

	vec3 p0;
	float pad1;

	vec3 p1;
	float pad2;

	vec3 p2;
	float pad3;

	vec3 skyboxColor;
	float exposure;
};

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

//Handling intersection

void main() {

	//Get ray position

	const ivec3 size = imageSize(rayOutput);
	const ivec3 loc = ivec3(gl_GlobalInvocationID.xyz);

	if(loc.x >= size.x || loc.y >= size.y) return;

	//Store

	vec3 color = imageLoad(rayOutput, loc).rgb;

	#ifdef AVOID_CONFLICTS

		for(int l = 1; l < size.z; ++l)
			color += imageLoad(rayOutput, loc + ivec3(0, 0, l)).rgb;

	#endif

	//Exposure mapping

	color = vec3(1, 1, 1) - exp(-color * exposure);

	//Gamma correction

	color = 
			color * 0.012522878 +
            color * color * 0.682171111 +
            color * color * color * 0.305306011;

	imageStore(rayOutput, loc, vec4(color, 1));
}