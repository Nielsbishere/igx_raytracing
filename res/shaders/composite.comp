#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_gpu_shader_int64 : require
#include "defines.glsl"
#include "light.glsl"

layout(binding=0, rgba8) writeonly uniform image2D rayOutput;
layout(binding=1, rgba32f) uniform image2D accumulation;

layout(binding=1) uniform sampler2DMS ui;
layout(binding=2) uniform sampler2D dirObject;
layout(binding=3) uniform sampler2D uvNormal;
layout(binding=4) uniform sampler2D cloutput;
layout(binding=5) uniform sampler2D lighting;

layout(binding=8, std140) readonly buffer SeedBuffer {
	Seed seed;
};

#ifdef DEBUG

	const uint DEBUG_TYPE_DEFAULT				= 0;
	const uint DEBUG_TYPE_RAY_DIR				= 1;
	const uint DEBUG_TYPE_NORMALS				= 2;
	const uint DEBUG_TYPE_UV					= 3;
	const uint DEBUG_TYPE_OBJECT				= 4;
	const uint DEBUG_TYPE_MATERIAL				= 5;
	const uint DEBUG_TYPE_ALBEDO				= 6;
	const uint DEBUG_TYPE_METALLIC				= 7;
	const uint DEBUG_TYPE_AMBIENT				= 8;
	const uint DEBUG_TYPE_ROUGHNESS				= 9;
	const uint DEBUG_TYPE_EMISSIVE				= 10;
	const uint DEBUG_TYPE_TRANSPARENCY			= 11;
	const uint DEBUG_TYPE_SKYBOX				= 12;
	const uint DEBUG_TYPE_LIGHTING				= 13;
	const uint DEBUG_TYPE_REFLECTION			= 14;
	const uint DEBUG_TYPE_SHADOW				= 15;
	const uint DEBUG_TYPE_LIGHTS_PER_PIXEL		= 16;
	const uint DEBUG_TYPE_CLOUD_LIGHTING		= 17;
	const uint DEBUG_TYPE_CLOUD_TRANSPARENCY	= 18;
	const uint DEBUG_TYPE_SKY					= 19;
	
	layout(binding=2, std140) uniform DebugData {
		uint debugType;
		uint nanOnly;
	};

#endif

layout(local_size_x = THREADS_XY, local_size_y = THREADS_XY, local_size_z = 1) in;

void main() {

	//Get ray position

	const ivec2 loc = ivec2(gl_GlobalInvocationID.xy);

	if(loc.x >= camera.width || loc.y >= camera.height) 
		return;

	const uvec2 uloc = uvec2(gl_GlobalInvocationID.xy);
	const vec2 asUv = (vec2(loc) + 0.5) / vec2(camera.width, camera.height);
	
	//Calculate hit
	
	const vec4 _dirObject = texture(dirObject, asUv);
	const vec4 _uvNormal = texture(uvNormal, asUv);

	const uint object = floatBitsToUint(_dirObject.w);

	const vec3 n = decodeNormal(floatBitsToUint(_uvNormal.zw));

	Hit hit = Hit(

		normalize(_dirObject.xyz), 
		
		length(_dirObject.xyz), 

		_uvNormal.xy, 
		object,

		n,
		n
	);

	if(object == noRayHit)
		hit.hitT = noHit;

	const Ray prim = Ray(camera.eye, hit.rayDir);
	const vec3 hitPos = prim.pos + _dirObject.xyz;

	vec3 color = vec3(0);
	vec4 cloud = vec4(0);

	#ifndef DEBUG
		
		//vec4 cloud = texture(cloutput, asUv);
		vec3 light = texture(lighting, asUv).rgb;

		color = mix(shadeHitFinalRecursion(prim, hit, light), cloud.rgb, cloud.a);

	#else

		switch(debugType) {

			case DEBUG_TYPE_DEFAULT: {

				//vec4 cloud = texture(cloutput, asUv);
				vec3 light = texture(lighting, asUv).rgb;

				color = mix(shadeHitFinalRecursion(prim, hit, light), cloud.rgb, cloud.a);
				break;
			}

			case DEBUG_TYPE_RAY_DIR:
				color = prim.dir * 0.5 + 0.5;
				break;

			case DEBUG_TYPE_NORMALS:

				if(hit.hitT < noHit)
					color = hit.objectNormal * 0.5 + 0.5;

				break;

			case DEBUG_TYPE_UV:
			
				if(hit.hitT < noHit)
					color = vec3(fract(hit.uv), 0);

				break;

			case DEBUG_TYPE_OBJECT: {

				uint geometryCount = sceneInfo.triangleCount + sceneInfo.sphereCount + sceneInfo.cubeCount + sceneInfo.planeCount;
				
				if(hit.hitT < noHit)
					color = (float(hit.object + 1) / geometryCount).rrr;

				break;
			}

			case DEBUG_TYPE_MATERIAL:

				if(hit.hitT < noHit)
					color = ((materialIndices[hit.object] + 1) / sceneInfo.materialCount).rrr;

				break;

			case DEBUG_TYPE_ALBEDO:
			
				if(hit.hitT < noHit)
					color = unpackColor3(materials[materialIndices[hit.object]].albedoMetallic);

				break;
				
			case DEBUG_TYPE_METALLIC:
			
				if(hit.hitT < noHit)
					color = unpackColorAUnorm(materials[materialIndices[hit.object]].albedoMetallic).rrr;

				break;

			case DEBUG_TYPE_AMBIENT:
			
				if(hit.hitT < noHit)
					color = unpackColor3(materials[materialIndices[hit.object]].ambientRoughness);

				break;
				
			case DEBUG_TYPE_ROUGHNESS:
			
				if(hit.hitT < noHit)
					color = unpackColorAUnorm(materials[materialIndices[hit.object]].ambientRoughness).rrr;

				break;

			case DEBUG_TYPE_EMISSIVE:
			
				if(hit.hitT < noHit)
					color = unpackColor3(materials[materialIndices[hit.object]].emissive);

				break;

			case DEBUG_TYPE_TRANSPARENCY:
			
				if(hit.hitT < noHit)
					color = materials[materialIndices[hit.object]].transparency.rrr;

				break;

			case DEBUG_TYPE_SKYBOX:
				color = sampleSkybox(prim.dir);
				break;

			case DEBUG_TYPE_LIGHTING:

				if(hit.hitT < noHit) 
					color = texture(lighting, asUv).rgb;

				break;

			case DEBUG_TYPE_REFLECTION:

				if(hit.hitT < noHit)
					color = sampleSkybox(reflect(prim.dir, hit.objectNormal));

				break;

			case DEBUG_TYPE_CLOUD_LIGHTING:
				color = texture(cloutput, asUv).rgb;
				break;

			case DEBUG_TYPE_CLOUD_TRANSPARENCY:
				color = texture(cloutput, asUv).aaa;
				break;

			case DEBUG_TYPE_SKY: {

				vec3 skybox = sampleSkybox(prim.dir);
				//vec4 cloud = texture(cloutput, asUv);

				color = mix(skybox, cloud.rgb, cloud.a);

				if(cloud.a == 0 && hit.hitT < noHit)
					color = vec3(0);

				break;
			}

			//TODO: Shadow?, Light_per_pixel

		}

		//Mark NaN as a bright blue

		if(any(isnan(color)))
			color = vec3(0, 0, 10000);

		//Or display only blue for NaN points (black for regular)

		else if(nanOnly != 0)
			color = vec3(0);

	#endif

	//Store to accumulation buffer if needed

	if((camera.flags & CameraType_USE_SUPERSAMPLING) != 0) {

		if(seed.sampleCount > 1)
			color += imageLoad(accumulation, ivec2(loc)).rgb;

		imageStore(accumulation, ivec2(loc), vec4(color, 0));

		color /= seed.sampleCount;
	}
	
	//Exposure mapping

	color = max(vec3(1, 1, 1) - exp(-color * camera.exposure), vec3(0));

	//Blend with UI

	int sampleCount = textureSamples(ui);

	ivec2 sampleLoc = ivec2(loc.x, camera.height - loc.y);

	if((camera.flags & CameraType_USE_UI) != 0) {

		vec4 uiColor = toRGB(texelFetch(ui, sampleLoc, 0));

		for(int i = 1; i < sampleCount; ++i)
			uiColor += toRGB(texelFetch(ui, sampleLoc, i));

		uiColor /= sampleCount;

		color = mix(color, uiColor.rgb, float(uiColor.a != 0));

	}

	//Store
	
	imageStore(rayOutput, loc, vec4(color, 1));
}