#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_gpu_shader_int64 : require
#include "defines.glsl"
#include "trace.glsl"

layout(binding=8, std140) readonly buffer SeedBuffer {
	Seed seed;
};

layout(binding=0, rgba32f) writeonly uniform image2D dirObject;
layout(binding=1, rgba32f) writeonly uniform image2D uvNormal;

layout(local_size_x = THREADS_XY, local_size_y = THREADS_XY, local_size_z = 1) in;

void main() {

	//Check if out of bounds
	
	const uvec2 loc = gl_GlobalInvocationID.xy;

	if(loc.x >= camera.width || loc.y >= camera.height)
		return;

	//Calculate primary intersection

	//TODO: Should use blueNoiseRg

	Ray ray = calculatePrimary(loc, vec2(seed.randomX, seed.randomY));
	
	const Hit hit = traceGeometry(ray, noRayHit);
	
	//TODO: Perhaps do an intersect per tile (4 planes)
	//		then intersect that geometry and lights
	//		and reduce spp for primaries (reprojection)

	//Store only the dirT buffer and the uvObjectNormal for non sky tiles

	vec4 _dirObject = vec4(hit.rayDir * hit.hitT, uintBitsToFloat(hit.object));

	if(hit.hitT == noHit)
		_dirObject = vec4(hit.rayDir, uintBitsToFloat(noRayHit));

	imageStore(dirObject, ivec2(loc), _dirObject);

	#ifdef DEBUG
		imageStore(uvNormal, ivec2(loc), vec4(hit.uv, uintBitsToFloat(encodeNormal(hit.n))));
	#else
		if (hit.hitT < noHit)
			imageStore(uvNormal, ivec2(loc), vec4(hit.uv, uintBitsToFloat(encodeNormal(hit.n))));
	#endif

}