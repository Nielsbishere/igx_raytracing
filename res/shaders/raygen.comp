#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_gpu_shader_int64 : require
#include "defines.glsl"
#include "trace.glsl"

layout(binding=7, std430) writeonly buffer HitBuffer {
	Hit hitBuffer[];
};

layout(binding=8, std140) readonly buffer SeedBuffer {
	Seed seed;
};

layout(local_size_x = THREADS_XY, local_size_y = THREADS_XY, local_size_z = 1) in;

void main() {

	//Check if out of bounds
	//and calculate the primary for this pixel
	
	const uvec2 loc = gl_GlobalInvocationID.xy;

	if(loc.x >= camera.width || loc.y >= camera.height)
		return;

	Ray ray = calculatePrimary(loc, vec2(seed.randomX, seed.randomY));
	
	//TODO: Perhaps do an intersect per tile (4 planes)
	//		then intersect that geometry and lights
	//		and reduce spp for primaries (reprojection)
	
	//Store in a cache friendly manner

	const uint loc1D = calculateTiled(loc);
	hitBuffer[loc1D] = traceGeometry(ray, noRayHit);
}