#version 450
#extension GL_GOOGLE_include_directive : require
#include "defines.glsl"
#include "light.glsl"

layout(binding=3, rgba16f) writeonly uniform image2D cloutput;

layout(binding=3) uniform sampler3D worleySampler;

layout(binding=1, std140) uniform WorleyData {

	uvec3 targetRes;
	float offsetX;

	uvec3 pointsRes;
	float offsetY;

	float offsetZ;
	bool isInverted;
	float worleyLayer;
	float cloudA;

	vec3 cloudScale;
	float cloudB;

	vec3 cloudOffset;
	float cloudThreshold;

	float cloudMultiplier;
	uint cloudSamples;
	float windSpeed;
	uint pad;

	vec2 windDirection;
	float cloudAbsorption;
	uint lightSamples;
	bool cloudsEnabled;

	//TODO: cloud_noise.glsl

};

layout(binding=13, std140) readonly buffer HitBuffer {
	Hit hitBuffer[];
};

bool intersectCloud(Ray ray, inout float minT, inout float maxT, float hitT) {

	//Check if the ray is inbetween the clouds

	const float cloudStart = min(cloudA, cloudB);
	const float cloudEnd = max(cloudA, cloudB);

	const bool betweenClouds = ray.pos.y >= cloudStart && ray.pos.y <= cloudEnd;

	//Get down plane intersection

	Hit downHit;
	downHit.hitT = noHit;

	rayIntersectPlane(ray, vec4(0, 1, 0, cloudStart), downHit, 0, noRayHit);

	//The top of our clouds
	
	Hit upHit;
	upHit.hitT = noHit;

	rayIntersectPlane(ray, vec4(0, 1, 0, cloudEnd), upHit, 0, noRayHit);

	//No hit on any of them and we're not in the center either
	
	if(downHit.hitT == noHit && upHit.hitT == noHit && !betweenClouds)
		return false;

	//If we are in clouds, we need to get our exit point or GBuffer hit point
	
	if(betweenClouds) {
		minT = 0;
		maxT = min(min(downHit.hitT, upHit.hitT), hitT);
	}

	//Otherwise, we hit the other two planes, since they are perpendicular

	else {
		minT = min(downHit.hitT, upHit.hitT);
		maxT = min(max(downHit.hitT, upHit.hitT), hitT);
	}

	//Sometimes we don't hit "anything", e.g. when inside of the cloud
	//then we would have a minT of hitT, which could be noHit

	if(maxT == noHit)
		maxT = 1000;

	return true;
}

float calcPh(vec3 p) {
	return (p.y - min(cloudA, cloudB)) / abs(cloudB - cloudA);
}

//http://www.diva-portal.org/smash/get/diva2:1223894/FULLTEXT01.pdf
float D(vec3 p) {

	//Calculate variables altering cloud shape by height
	//E.g. rounding bottom and top

	float ph = calcPh(p);

	float SRb = clamp(ph / 0.07, 0, 1);
	float SRt = 1 - clamp((ph - 0.2) / 0.8, 0, 1);		//TODO: Weather map
	float SA = SRb * SRt;

	//Get cloud shape from grid sample

	float s = texture(worleySampler, p * cloudScale * 0.001 + cloudOffset * 0.01).r;

	float cloudShape = max(s - cloudThreshold, 0) * cloudMultiplier;

	return cloudShape * SA;
}

vec3 marchLight(vec3 p) {

	vec3 light = vec3(0);

	if(lightSamples == 0)
		return vec3(1, 1, 1);

	//There could be something blocking the sun(s) :(
	//But do we want to shoot a ray for that?

	for(uint i = 0; i < directionalLightCount; ++i) {

		vec3 dir = -lights[i].dir;

		//Since our point is in the cloud, we can assume minT == 0

		float minT, maxT;

		intersectCloud(Ray(p, 0, dir, 0), minT, maxT, noHit);

		float marchDist = (minT + maxT) / lightSamples;

		float d = 0;

		for(uint j = 0; j < lightSamples; ++j)
			d += D(p + dir * (marchDist * j + minT)) * marchDist;

		light += exp(-d * cloudAbsorption) * lights[i].col;
	}

	return light;
}

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

void main() {

	//Generate primaries
	
	const uvec2 loc = gl_GlobalInvocationID.xy;

	if(loc.x >= width || loc.y >= height)
		return;

	const ivec2 iloc = ivec2(loc);

	const uint loc1D = loc.x + loc.y * width;
	const Ray ray = calculatePrimary(loc);

	float hitT = hitBuffer[loc1D].hitT;

	//Intersect cloud

	float minT, maxT;

	if(!intersectCloud(ray, minT, maxT, hitT)) {
		imageStore(cloutput, iloc, vec4(0));
		return;
	}

	//Our intersection has less prio than the backbuffer

	if(minT >= hitT) {
		imageStore(cloutput, iloc, vec4(0));
		return;
	}
	
	//Calculate intersection info

	float maxDist = maxT - minT;
	float marchDist = maxDist / cloudSamples;
	
	float currDist = minT, transmittance = 1;
	vec3 color = vec3(0);
	
	for(uint i = 0; i < cloudSamples; ++i) {

		float t = minT + i * marchDist;
		vec3 p = ray.pos + ray.dir * t;
		float d = D(p);

		if(d > 0) {

			color += marchDist * d * transmittance * marchLight(p);
			transmittance *= exp(-marchDist * d * cloudAbsorption);

			if(transmittance < 0.01)
				break;
		}
	}

	imageStore(cloutput, iloc, vec4(color, 1 - transmittance));
}