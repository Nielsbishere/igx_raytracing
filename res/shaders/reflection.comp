#version 450
#extension GL_GOOGLE_include_directive : require
#include "defines.glsl"
#include "trace.glsl"
#include "light.glsl"

layout(binding=2, outputFormat) writeonly uniform image2D reflectionOutput;

layout(binding=13, std140) readonly buffer HitBuffer {
	Hit hitBuffer[];
};

//

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

void main() {

	//Check if out of bounds
	
	const uvec2 loc = gl_GlobalInvocationID.xy;

	if(loc.x >= width || loc.y >= height)
		return;

	//Calculate hit

	const uint loc1D = loc.x + loc.y * width;
	const Ray prim = calculatePrimary(loc);

	const Hit hit = hitBuffer[loc1D];

	if(hit.hitT == noHit) {
		imageStore(reflectionOutput, ivec2(loc), vec4(0));
		return;
	}

	const vec3 pos = prim.pos + prim.dir * hit.hitT;

	//Reflect ray

	const vec3 refl = reflect(normalize(pos - eye), hit.normal);

	const Ray ray = Ray(
		pos + hit.normal * epsilon, 0,
		refl, 0
	);

	vec3 col = shadeRay(ray, skyboxColor, skyboxColor);

	if(any(isnan(col)))
		col = vec3(1000, 0, 0);

	imageStore(reflectionOutput, ivec2(loc), vec4(col, 0));
}