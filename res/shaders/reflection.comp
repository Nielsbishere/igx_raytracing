#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_gpu_shader_int64 : require
#include "defines.glsl"
#include "trace.glsl"
#include "light.glsl"

layout(binding=2, outputFormat) writeonly uniform image2D reflectionOutput;

layout(binding=13, std140) readonly buffer HitBuffer {
	Hit hitBuffer[];
};

//

layout(local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

void main() {

	//Check if out of bounds
	
	const uvec2 loc = gl_GlobalInvocationID.xy;

	if(loc.x >= width || loc.y >= height)
		return;

	//Calculate hit

	const uint loc1D = loc.x + loc.y * width;
	const Ray prim = calculatePrimary(loc);

	const Hit primHit = hitBuffer[loc1D];

	if(primHit.hitT == noHit) {
		imageStore(reflectionOutput, ivec2(loc), vec4(0));
		return;
	}

	const vec3 pos = prim.pos + prim.dir * primHit.hitT;

	//Reflect ray

	const vec3 v = normalize(pos - eye);
	vec3 refl = reflect(v, primHit.normal);

	if(dot(v, primHit.normal) < 0)
		refl *= -1;

	const Ray ray = Ray(
		pos + primHit.normal * epsilon, 0,
		refl, 0
	);
	
	Hit hit = traceGeometry(ray);
	vec3 col = shadeHit(ray, hit, skyboxColor, skyboxColor);

	switch(displayType) {
		
		case DisplayType_Reflection_albedo:
			col = materials[hit.material].albedo;
			break;

		case DisplayType_Reflection_normals:
			col = hit.normal.xyz * 0.5 + 0.5;
			break;

		case DisplayType_Reflection_material:
			col = vec3(float(hit.hitT != noHit ? hit.material + 1 : 0) / (materials.length() + 1));
			break;

		case DisplayType_Reflection_object:
			col = vec3(float(hit.hitT != noHit ? hit.object + 1 : 0) / (1 + triangleCount + sphereCount + cubeCount + planeCount));
			break;

		case DisplayType_Reflection_intersection_side:
			col = vec3((floor(hit.intersection.xy) - 2) / 6, 0);
			break;

		case DisplayType_Reflection_intersection_attributes:
			col = vec3(mod(hit.intersection, 2), 0);
			break;

		default:
			col = shadeHit(ray, hit, skyboxColor, skyboxColor);
	}

	imageStore(reflectionOutput, ivec2(loc), vec4(col, 0));
}